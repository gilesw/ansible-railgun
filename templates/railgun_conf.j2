# rg-listener.conf
# This file provides the configuration for the local Railgun "listener" process.
#
# Note that Railgun requires memcached (https://memcached.org/) to be installed
# and (by default) listening on 127.0.0.1:11211 (the default memcached
# host:port).
# You should also increase the CACHESIZE set in memcached.conf from
# its default 64MB (very low) to at least 2048 (2GB). Further tuning should be
# done by consulting the memcached documentation around the STAT command.

# Activation details
#
#     Website Owners: activation.token can be found at
#     https://www.cloudflare.com/a/account/my-account
#
#     CloudFlare Hosting Partners: activation.token can be found at
#     https://partners.cloudflare.com
#
# Set activation.railgun_host to the external IP (recommended), or a hostname that
# resolves to the external IP, of your Railgun instance. Note that the hostname
# will not be re-resolved unless Railgun is restarted.
activation.token = {{ railgun_activation_token }}
activation.railgun_host = {{ railgun_activation_railgun_host }}

# Port to listen on (should not need to change).
#wan.port = 2408
wan.port = {{ railgun_wan_port }}

{% if railgun_wan_ip %}
# specifying the ipv4 interface ip will force railgun to use ipv4 rather than the default of * on ipv6
wan.ip = {{ railgun_wan_ip }}
{% endif %}

# Static map of IPs for use in NAT environments
map.file = {{ railgun_map_file }}
stderr.file = {{ railgun_stderr_file }}
pid.file = {{ railgun_pid_file }}

# Log only errors by default
#
# 0 - log only errors
# 5 - full debug logging (not for production use)
log.level = {{ railgun_log_level }}

# Disable origin server SSL certificate validation by
# default. This is done to prevent potential errors for
# Railgun instances that don't have the needed origin
# server certificates installed
validate.cert = {{ railgun_validate_cert }}

# CA Bundles
# Railgun includes its own certificate authority bundle for
# common certificate providers. Comment ca.bundle out
# to use the default openssl bundle provided with the OS
ca.bundle = {{ railgun_ca_bundle }}

# Memcached pools
#
# Use of a socket is recommended for best performance
# if your memcached does not require network connectivity
#
# Multiple memcached servers (host:port format) can be separated
# with a space
memcached.servers = {{ railgun_memcached_servers }}
#memcached.servers = /tmp/memcached.sock

# Timeout for memcached lookup responses in milliseconds
# Increase this value if memcached I/O timeouts are occurring
# in the Railgun logs
memcached.timeout = {{ railgun_memcached_timeout }}

# The maximum size (in bytes) of an item that will be stored
# in memcached. Default to 1000000.
memcached.limit = {{ railgun_memcached_limit }}

# The expiration time of individual memcached items in seconds.
# The default is 600 seconds (10 minutes). If set to 0 then
# the expiration time is infinite.
memcached.expiration = {{ railgun_memcached_expiration }}

# If the HTTP response body is greater than this number of bytes it will not be
# delta compressed and the body will be streamed across the WAN as it is read
# from the HTTP server. Defaults to 250000 bytes.
#
# Note that increasing this beyond 250KB will allow Railgun to consume more CPU
# resources per request. Text (HTML, CSS, JavaScript, JSON) files over 250KB
# should be rare, and if there is a need to increase stream.size substantially,
# you should be aware of the diminishing returns.
# stream.size = 250000
stream.size = {{ railgun_stream_size }}

# Statistics reporting
#
# Railgun provides key metrics by JSON over HTTP, syslog, and/or
# POSTs to a URL
#
# Set to 1 to enable statistics gathering and reporting
stats.enabled = {{ railgun_stats_enabled }}

# Sets the URL (e.g. http://stats.example.com:9090/) to POST to.
# Defaults to nothing indicating that stats will not be POSTed anywhere
{% if railgun_stats_url %}
stats.url = {{ railgun_stats_url }}
{% endif %}

# Determines whether stats are periodically written to the log file.
# Set to 1 to enable
stats.log = {{ railgun_stats_log }}

# How often (in minutes) stats are generated (and logged and
# POSTed to the stats.url)
stats.interval = {{ railgun_stats_interval }}

# host:port on which to listen and create a simple HTTP API through
# which stats can be read
{% if railgun_stats_listen %}
stats.listen = {{ railgun_stats_listen }}
{% endif %}

